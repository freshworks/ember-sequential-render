{"jsonapi":{"version":"1.0"},"data":{"type":"project","id":"@freshworks/ember-sequential-render","attributes":{"name":"@freshworks/ember-sequential-render","version":"2.0.0","navigationIndex":[{"type":"components","items":[{"id":"@freshworks/ember-sequential-render/components/sequential-render","path":"components/sequential-render","name":"{{sequential-render}}"}]},{"type":"services","items":[{"id":"@freshworks/ember-sequential-render/services/render-states","path":"services/render-states","name":"RenderStates"}]}]},"relationships":{"modules":{"data":[{"type":"module","id":"@freshworks/ember-sequential-render/components/sequential-render"},{"type":"module","id":"@freshworks/ember-sequential-render/services/render-states"}]}}},"included":[{"type":"component","id":"@freshworks/ember-sequential-render/components/sequential-render~sequential-render","attributes":{"name":"sequential-render","file":"@freshworks/ember-sequential-render/components/sequential-render","description":"<div class=\"docs-md\"><p>A composable container component that prioritizes and queues the data fetch and the rendering of its content with the necessary loading states</p>\n<p>  Sample usage:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedhandlebars\"><span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">SequentialRender</span>\n      @<span class=\"hljs-attr\">renderPriority</span>=</span></span><span class=\"hljs-template-variable\">{{<span class=\"hljs-name\">1</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">\n      @<span class=\"hljs-attr\">taskName</span>=<span class=\"hljs-string\">&#x27;fetchPrimaryContent&#x27;</span>\n      @<span class=\"hljs-attr\">getData</span>=</span></span><span class=\"hljs-template-variable\">{{<span class=\"hljs-name\">this.executePromise</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\">\n      @<span class=\"hljs-attr\">renderCallback</span>=</span></span><span class=\"hljs-template-variable\">{{<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">action</span></span> <span class=\"hljs-string\">&#x27;contentRenderCallback&#x27;</span>}}</span><span class=\"xml\"><span class=\"hljs-tag\"> <span class=\"hljs-attr\">as</span> |<span class=\"hljs-attr\">renderHash</span>|\n    &gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">renderHash.loaderTemplate</span>&gt;</span>\n        // Handle loading state if required\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">renderHash.loaderTemplate</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">renderHash.contentTemplate</span> @<span class=\"hljs-attr\">loaderClass</span>=<span class=\"hljs-string\">&quot;loader-fade&quot;</span>&gt;</span>\n        // Use renderHash.content to render the content.\n        // Use renderHash.isContentLoading to act based on the data loading state.\n        // Use renderHash.retry action to retrigger data fetch and rendering as applicable.\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">renderHash.contentTemplate</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">SequentialRender</span>&gt;</span></span></code></pre></div>","lineNumber":8,"access":"public","tags":[],"isInterface":false,"exportType":"default","decorators":[],"fields":[],"methods":[],"accessors":[],"parentClassId":null,"arguments":[{"name":"taskName","file":"@freshworks/ember-sequential-render/components/sequential-render","description":"<div class=\"docs-md\"><p>The unique name of the task.</p></div>","lineNumber":57,"access":"public","tags":[{"name":"required","value":1}],"type":"string","isStatic":false,"decorators":[]},{"name":"renderPriority","file":"@freshworks/ember-sequential-render/components/sequential-render","description":"<div class=\"docs-md\"><p>Starts from 0, with 0 being a critical priority task that needs to be executed first. Priorities need not be sequential. \nSo sequential-render blocks can be used conditionally with no extra effort.\nrenderPriority can be conditional. But we do not recommend modifying priority midway.</p></div>","lineNumber":65,"access":"public","tags":[],"type":"number","defaultValue":"0","isStatic":false,"decorators":[]},{"name":"getData","file":"@freshworks/ember-sequential-render/components/sequential-render","description":"<div class=\"docs-md\"><p>The function that performs all the required asynchronous actions and returns a promise.</p></div>","lineNumber":79,"access":"public","tags":[],"type":"function","isStatic":false,"decorators":[]},{"name":"renderCallback","file":"@freshworks/ember-sequential-render/components/sequential-render","description":"<div class=\"docs-md\"><p>A callback function to be executed after rendering is complete.</p></div>","lineNumber":87,"access":"public","tags":[],"type":"function","isStatic":false,"decorators":[]}],"yields":[{"name":"renderHash","type":"Hash","description":""},{"name":"renderHash.content","type":"any","description":"The response from performing getData."},{"name":"renderHash.isContentLoading","type":"boolean","description":"Flag to check the loading state of the data fetch."},{"name":"renderHash.contentTemplate","type":"Component","description":"Block component used to render the content of the item.\n        Accepts loaderClass as an argument. This class can be used to style the subsequent loading states for the item during rerender."},{"name":"renderHash.loaderTemplate","type":"Component","description":"Block component used to render the loading state of the item."},{"name":"renderHash.retry","type":"Action","description":"Exposes an action which can be used to retry the data fetch + render process without affecting the queue / app render states.."}]}},{"type":"module","id":"@freshworks/ember-sequential-render/components/sequential-render","attributes":{"file":"@freshworks/ember-sequential-render/components/sequential-render","functions":[],"variables":[]},"relationships":{"classes":{"data":[]},"components":{"data":[{"type":"component","id":"@freshworks/ember-sequential-render/components/sequential-render~sequential-render"}]}}},{"type":"class","id":"@freshworks/ember-sequential-render/services/render-states~render-states","attributes":{"name":"render-states","file":"@freshworks/ember-sequential-render/services/render-states","description":"<div class=\"docs-md\"><p>A service to control the render states of the application.\nIt maintains the render queue and the available priorities.</p></div>","lineNumber":5,"access":"public","tags":[{"name":"service","value":""}],"isInterface":false,"exportType":"default","decorators":[],"fields":[{"name":"renderLater","file":"@freshworks/ember-sequential-render/services/render-states","description":"<div class=\"docs-md\"><p>Flag to denote if the postrender callback has been executed.</p></div>","lineNumber":31,"access":"public","tags":[],"type":"boolean","isStatic":false,"decorators":[]}],"methods":[{"name":"resetRenderState","file":"@freshworks/ember-sequential-render/services/render-states","description":"<div class=\"docs-md\"><p>This can be used to reset the render state during transitions.</p>\n<p>   In routes/application.js,</p>\n<pre class=\"docs-md__code\"><code>   renderStates: service(),\n   actions: {\n     didTransition() {\n       get(this, &#39;renderStates&#39;).resetRenderState();\n     }\n   }</code></pre></div>","lineNumber":73,"access":"public","tags":[],"returns":null,"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"registerPostRenderCallback","file":"@freshworks/ember-sequential-render/services/render-states","description":"<div class=\"docs-md\"><p>This can be used to bind post render callbacks, if any, for the app.\nThis will be executed once after the highest priority item is rendered.\nThis also allows for a fallback timeout, after which the callback is executed irrespective of any state.</p>\n<p>   In routes/application.js,</p>\n<pre class=\"docs-md__code\"><code>   renderStates: service(),\n   setupController(controller) {\n     get(this, &#39;renderStates&#39;).registerPostRenderCallback(this._postRenderCallback.bind(this), FALLBACK_TIMEOUT);\n   }</code></pre></div>","lineNumber":184,"access":"public","tags":[],"returns":null,"params":[{"name":"callback","type":"Function","description":"Callback function to be executed once post render."},{"name":"fallbackTimeout","type":"number","description":"time in milliseconds after which the callback will be executed irrespective of the current render state."}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"performOncePostRender","file":"@freshworks/ember-sequential-render/services/render-states","description":"<div class=\"docs-md\"><p>performOncePostRender is called after the highest priority item is rendered for the first time\n  or after a given timeout as fallback.</p></div>","lineNumber":212,"access":"private","tags":[],"returns":null,"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]}],"accessors":[],"parentClassId":null}},{"type":"module","id":"@freshworks/ember-sequential-render/services/render-states","attributes":{"file":"@freshworks/ember-sequential-render/services/render-states","functions":[{"name":"_resetProperties","file":"@freshworks/ember-sequential-render/services/render-states","description":"<div class=\"docs-md\"><p>Resets all queues and states</p></div>","lineNumber":47,"access":"private","tags":[],"returns":null,"params":[],"isAsync":false,"isGenerator":false,"exportType":"named"},{"name":"addScheduledCall","file":"@freshworks/ember-sequential-render/services/render-states","description":"<div class=\"docs-md\"><p>Adds new entry to scheduledCalls property in {taskName: function(){}} format.</p></div>","lineNumber":107,"access":"public","tags":[],"returns":null,"params":[{"name":"taskName","type":"string","description":"- The name of the task to be added."},{"name":"funtionReference","type":"Function","description":"- The scheduled function reference for the taskName."}],"isAsync":false,"isGenerator":false,"exportType":"named"},{"name":"removeScheduledCall","file":"@freshworks/ember-sequential-render/services/render-states","description":"<div class=\"docs-md\"><p>Removes the entry from scheduledCalls property.</p></div>","lineNumber":118,"access":"public","tags":[],"returns":null,"params":[{"name":"taskName","type":"string","description":"- The name of the task to be removed"}],"isAsync":false,"isGenerator":false,"exportType":"named"},{"name":"isTaskScheduled","file":"@freshworks/ember-sequential-render/services/render-states","description":"<div class=\"docs-md\"><p>checks if the task is scheduled.</p></div>","lineNumber":128,"access":"public","tags":[],"returns":null,"params":[{"name":"taskName","type":"string","description":"- The name of the task to be checked"}],"isAsync":false,"isGenerator":false,"exportType":"named"}],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"@freshworks/ember-sequential-render/services/render-states~render-states"}]},"components":{"data":[]}}}]}
